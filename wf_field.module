<?php
// $Id$

/**
 * @file
 * An example workflow field using the Field API.
 *
 * See @link field_types Field Types API @endlink
 */


/**
 * @todo in order to abort a transition before the rules are run, it would be great for the hook_
 */
define('WF_FIELD_DENY', NODE_ACCESS_DENY);

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function wf_field_field_info() {
  return array(
    'wf_state' => array(
      'label' => t('Workflow State'),
      'description' => t('Workflow State.'),
      'default_widget' => 'wf_field_options',
      'default_formatter' => 'wf_field_simple_text',
  ),
  );
}

/**
 * Implements hook_perm().
 */
function wf_field_permission() {
  module_load_include('inc', 'wf_field');
  $instances = _wf_field_get_all_instances();
  // Build up a clunky list of all possible transitions.
  $permissions = array();
  // @todo: currently the events are *NOT* entity-type specific, clashes could/can occur.
  // as different instances could have the same field_name but different configuration (i.e. instance<->field settings).
  foreach ($instances as $instance) {
    $transitions = wf_field_get_transitions(null, $instance, array('all_transitions' => TRUE, 'ignore_permissions' => TRUE, 'complete_info' => TRUE));
    foreach ( (array) $transitions as $key => $info ) {
      if (!$info['disabled']) {
        $permissions['wf_field ' . $instance['field_name'] . ' ' . $key] = array(
          'title' => t('@field_name: transition: @transition_label', array('@field_name' => $instance['field_name'], '@transition_label' => $info['full_label']))
        );
      }
    }
    $permissions['wf_field ' . $instance['field_name'] . ' all'] = array(
      'title' => t('@field_name: all transitions', array('@field_name' => $instance['field_name']))
    );
  }
  // administer wf_field
  $permissions['wf_field administer'] = array(
    'title' => t('Administer wf_field configuration')
  );
  
  return $permissions;
}

/**
 * Implements hook_field_validate().
 *
 * Verifies that the chosen workflow state is valid
 */
function wf_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  module_load_include('inc', 'wf_field');
  // @todo: make this a little nicer ...
  foreach ($items as $delta => $item) {
    $target_options = wf_field_get_current_transition_options($item['wf_state'], $instance, array('include_no_change_option'  => TRUE));
    if ($item['wf_state'] && !isset($target_options[$item['wf_state']]) ) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'wf_field_invalid',
        'message' => t('We need a valid state.'),
      );
    }
  }
}


function wf_field_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $widget = $instance['widget'];
  $form = array();

  $form['wf_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Workflow settings'),
    '#collapsible'  => TRUE
  );

  module_load_include('inc', 'wf_field');
  $transitions = wf_field_get_transitions(null, $instance, array('all_transitions' => TRUE, 'complete_info' => TRUE) );

  $form['wf_settings']['wf_states'] = array(
    '#type' => 'fieldset',
    '#title' => t('Define workflow states'),
    '#collapsed' => sizeof($transitions) > 0,
    '#collapsible'  => TRUE,
    '#description' => t('Configure workflow')
  );
  //
  $form['wf_settings']['wf_states']['text']  = array(
    '#type' => 'textarea',
    '#title' => t("One workflow state per line. Workflows must be identified by *numbers*, but can have text descriptions if given on the form '1|draft' or '2|draft (ready for review)'; '3|Publication|Published'"),
    '#default_value' => isset( $settings['wf_settings']['wf_states']['text']   ) ? $settings['wf_settings']['wf_states']['text']  : '',
    '#weight' => -1
  );

  if (is_array($transitions) && sizeof($transitions)) {
    $form['wf_settings']['wf_transitions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configure workflow transitions'),
      '#collapsed' => sizeof($transitions) == 0,
      '#collapsible'  => TRUE,
      '#description' => t('Provide named workflow transitions or disable transition by leaving the transition field blank; all enabled/default transitions will have permissions in the !permissions-table.',
      array('!permissions-table' => l('permissions table', 'admin/user/permissions'))),
    );

    foreach ($transitions as $key => $transition) {
      if (!$transition['disabled']) {
        $label = $transition['full_label'] ? $transition['full_label'] : $transition['default_label'];
        $description = t('You can name this transition - to disable this transition empty the field.');
      } 
      else {
        $label = $transition['default_label'];
        $description = t('Transition has been disabled. No permissions or rules events will be exposed for this transition. To (re-)enable the transition give the transition a name.');
      }
      $form['wf_settings']['wf_transitions'][$key] = array(
        '#type' => 'textfield',
        '#title' => check_plain($label),
        '#default_value' => (isset( $settings['wf_settings']['wf_transitions'][$key])) ?  $settings['wf_settings']['wf_transitions'][$key] : $transition['default_label'],
        '#description' => $description,
        '#parent' => 'transitions'
      ); 
    }
  }
  else {
    $form['wf_settings']['wf_transitions'] = array(
      '#type' => 'fieldset',
      '#title' => t('Name and define available workflow transitions'),
      '#collapsed' => FALSE,
      '#collapsible' => FALSE,
      '#description' => t('Please provide some states above first')
    );
  }
  return $form;
}


/**
 * Implements hook_field_is_empty().
 */
function wf_field_field_is_empty($item, $field) {
  return empty($item['wf_state']);
}

/**
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the
 *  user.
 */

/**
 * Implements hook_field_formatter_info().
 */
function wf_field_field_formatter_info() {
  return array(
  // Simple text
    'wf_field_simple_text' => array(
      'label' => t('Simple text-based formatter'),
      'field types' => array('wf_state'),
  ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - wf_field_simple_text just outputs the workflow state.
 */
function wf_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'wf_field_simple_text':
      module_load_include('inc', 'wf_field');
      foreach ($items as $delta => $item) {
        // @todo: better
        $element[$delta]['#markup'] =
          '<div class="wf-field-state-' . check_plain($item['wf_state']) . ' wf-field-' . check_plain($instance['field_name']) . '-state-' . check_plain($item['wf_state']) . '">' .
            wf_field_get_current_state_label($item['wf_state'], $instance, array('passive' => TRUE)) .
          '</div>';
      }
      break;
  }

  return $element;
}


/**
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 */

/**
 * Implements hook_field_widget_info().
 * 
 * Two widgets are exposed:
 * 
 * - "normal" options pulldown (select box with available transitions) 
 * - "buttons" widget that adds buttons to the Save/Preview-actions section of the (node edit) form. 
 */
function wf_field_field_widget_info() {
  return array(
    'wf_field_options' => array(
       'label' => t('Options'),
       'field types' => array('wf_state'),
    ),
    'wf_field_buttons' => array(
      'label' => t('Buttons'),
      'field types' => array('wf_state'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function wf_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // detect the default value form
  // @todo - a better way to do this?
  $is_default_value_widget = ( isset($form['#type']) && $form['#type'] == 'fieldset' ) && $form['#title'] == 'Default value' ;

  module_load_include('inc', 'wf_field');  
  
  $value = isset($items[$delta]['wf_state']) ? $items[$delta]['wf_state'] : NULL;
  $widget = $instance['widget'];
  $element += array(
    '#delta' => $delta,
  );
  // default value form gets to select from all states
  if ($is_default_value_widget) {
    $options = (array) _wf_field_get_states($instance);
    $element['wf_state'] = array(
      '#title' => t('Workflow Default State'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $value,
      '#element_validate' => array('wf_field_options_validate')
    );
  }
  else {
    switch ($widget['type']) {
      case 'wf_field_buttons':
        // no "include_no_change_option"
        $options = (array) wf_field_get_current_transition_options($value, $instance);
        // @todo: find a good "#weight"
        $weight = isset($form['actions']['submit']) ? $form['actions']['submit']['#weight'] + 1 : 100;

        // @todo: is this a good way of doing it?
        $transition_map = array();
        // and then the form buttons
        foreach ($options as $transition => $label ) {
          $form['actions']['wf_field_transition-' . $instance['field_name'] . '-' . $transition] = array(
            '#type' => 'submit',
            '#access' => TRUE,
            '#value' => $label,
            '#weight' => $weight++,
            '#submit' => array('node_form_submit'),
          );
          $transition_map[ $label ] = array('field_name' => $instance['field_name'], 'target_state' => $transition );
        }

        // render a hidden field and transfer value if a button is clicked
        $element['wf_state'] = array(
          '#type' => 'hidden',
          '#default_value' => $value,
          '#element_validate' => array('wf_field_button_widget_hidden_validate'),
          '#transition_map' => $transition_map
        );
        break;
      case 'wf_field_options':
      default:
        $options = (array) wf_field_get_current_transition_options($value, $instance, array('include_no_change_option' => TRUE));
        $element['wf_state'] = array(
          '#title' => t('Workflow Transitions (@current_state_label)', array('@current_state_label' => wf_field_get_current_state_label($value, $instance, array('passive' => TRUE)) )),
          '#type' => 'select',
          '#options' => $options,
          '#default_value' => $value,
          '#element_validate' => array('wf_field_options_validate')
        );
    }

  }

  return $element;
}

/**
 * Validate field options
 * @TODO: 
 */
function wf_field_options_validate($element, &$form_state) {
  // @todo: validate and man i don't understand some of this ...
  $value = $element['#value'];
  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function wf_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'wf_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}

function wf_field_field_load($entity_type, $entities, $field, $instances, $langcode, &$items, $age) {
  // store 
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      // Only process items with a cacheable format, the rest will be handled
      // by formatters if needed.
      $items[$id][$delta]['wf_state_old'] = isset($item['wf_state']) ?  $item['wf_state'] : NULL;
    }
  }
}

function wf_field_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $new_value = $entity->{$instance['field_name']}[ $langcode ][0]['wf_state'];
  
  // @todo: use 
  if (!isset($items[0]['wf_state_old'])) {
    $eid = entity_id($entity_type, $entity);
    $es = entity_load($entity_type, array($eid) );
    $unsaved_entity = $es[ $eid ];
    $old_value = isset($unsaved_entity->{$instance['field_name']}[ $langcode ][0]['wf_state']) ? $unsaved_entity->{$instance['field_name']}['und'][0]['wf_state'] : NULL;
  } else {
    $old_value = $items[0]['wf_state_old'];  
  }
  //
  
  // @todo: better way to find the *old* state
	// retrieve old and new value
	
  if ( $old_value != $new_value ) {
  	// basic info about this
    $vars = array(
    	'old_value' => $old_value, 
    	'new_value' => $new_value, 
    );
    // let's provide a possibility to manipulate and abort! 
    $responses = module_invoke_all('wf_field_before_transition_rules', $entity_type, $entity, $field, $instance, $langcode, $items, $vars);
    // @todo: verify this is the best way to do this
    if (is_array($responses) && sizeof($responses) && in_array(WF_FIELD_DENY, $responses)) {
      // @todo: proper d7 exceptions how to do these.
      throw new Exception( t('Transition has been aborted') );
      return false;
    }
    // run the transition rules 
    $responses = module_invoke_all('wf_field_transition_rules', $entity_type, $entity, $field, $instance, $langcode, $items, $vars);
    // run "after" transition rules 
    $responses = module_invoke_all('wf_field_after_transition_rules', $entity_type, $entity, $field, $instance, $langcode, $items, $vars);
    // "rollback" probably doesn't make sense any more, too many things have happened ...  
    // We'll never be able to ensure "undoing"/rolling back rule events, that ship has sailed ...  
  }
} 

/**
 * Implement hook_wf_field_transition_rules() for nodes.
 * @see file wf_field.rules.inc for the event declarations
 */
function wf_field_wf_field_transition_rules($entity_type, $entity, $field, $instance, $langcode, $items, $vars) {
  switch ($entity_type) {
    case 'node': 
      global $user;
      $node = $entity;
      
      $author = user_load($entity->uid);      
      // The first four lines of the expression below is the name of the
      // workflow event, on the form wf_field_transition_node_fieldname_{FROMSTATE}_{TOSTATE}.
      rules_invoke_event(
        'wf_field_transition_' . $entity_type. '_' . $instance['field_name'] . '_' . $vars['old_value'] . '_' . $vars['new_value'], $entity, $user, $author
      );
      
      // invoke outbound events 
      if (isset($vars['old_value'])) {
        rules_invoke_event(
          'wf_field_out_'  . $entity_type. '_' . $instance['field_name'] . '_' . $vars['old_value'], $entity, $user, $author
        );
      }
      // invoke inbound events
      rules_invoke_event(
        'wf_field_in_' .  $entity_type. '_' .  $instance['field_name'] . '_' . $vars['new_value'], $entity, $user, $author
      );
      // "any transition"-events per instance/field_name
      rules_invoke_event(
        'wf_field_any_' .  $entity_type. '_' .  $instance['field_name'] , $entity, $user, $author
      );
      break;
  }  
}



/**
 * Passes the value into the hidden field if a transition-submit button has been "clicked"
 * @param array $element
 * @param array $form_state
 */
function wf_field_button_widget_hidden_validate($element, &$form_state) {
  $op = $form_state['values']['op'];
  if (isset($element['#transition_map'][$op])) {
    $transition = $element['#transition_map'][$op];
    form_set_value($element, $transition['target_state'], $form_state);
  }
}
// }}} FIELDS

// {{{ BLOCK + MENUS
/**
 * Implements hook_block_info().
 */
function wf_field_block_info() {
  // List blocks.
  $blocks['wf_field_trigger_transition'] = array(
    'info' => t('WF Field transition block'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view.
 * @param string $delta
 */
function wf_field_block_view($delta = '') {
  switch ($delta) {
    case 'wf_field_trigger_transition':
      // if we can retrieve a node from the url/path
      $node = menu_get_object('node');
      if (is_object($node)) { 
        module_load_include('inc', 'wf_field');
        $grouped_transitions = _wf_field_get_all_grouped_transitions('node', $node);
        // @todo: include an edit-link if the user can edit this node? 
        if (sizeof($grouped_transitions)) {
          $block['subject'] = t('Transitions');
          // return either link to a confirm form or a CSRF-safe link
          $confirm_form = variable_get('wf_field_trigger_transition_block_use_confirmation_form', FALSE);
          $block['content'] = theme('wf_field_transition_block', array('node' => $node, 'grouped_transitions' => $grouped_transitions, 'confirm_form' => $confirm_form) );
          return $block;
        }
      } 
      break;
  }
}

/**
 * Implements hook_theme().
 */
function wf_field_theme() {
  return array(
    'wf_field_transition_block' => array(
      'variables' => array('node' => NULL, 'grouped_transitions' => array() ),
      'file' => 'wf_field.theme.inc'
    ),
  ); 
} 

/**
 * Implements hook_menu().
 */
function wf_field_menu() {
  $items = array();
  $items['node/%node/wf_field_trigger_transition/%/%'] = array(
    'title' => 'Trigger Transition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wf_field_trigger_transition', 1, 3, 4),
    'access callback' => 'wf_field_trigger_transition_access',
    'access arguments' => array(1, 3, 4),
    'type' => MENU_CALLBACK,
    'file' => 'wf_field.pages.inc',
  );
  $items['admin/config/workflow/wf_field'] = array(
    'title' => 'Workflow Field Settings',
    'description' => 'Configure wf_field settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wf_field_admin_settings'),
    'access arguments' => array('wf_field configure'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'wf_field.admin.inc',
  );
  return $items;
}

/**
 * Access callback for wf_field_trigger_transition (node/%node/wf_field_trigger_transition/%/%)
 * @param object $node
 * @param string $field_name
 * @param string/int $target_state
 */
function wf_field_trigger_transition_access($node, $field_name, $target_state) {
  module_load_include('inc', 'wf_field');
  return wf_field_is_transition_allowed($node, $field_name, $target_state);
}
